{"version":3,"file":"simpleEmailService-23d60475.js","sources":["../../src/services/simpleEmailService.ts"],"sourcesContent":["// üìß Simple Email Service - Immediate Fallback for Testing\r\n// This service provides immediate functionality while EmailJS is being set up\r\n\r\ninterface SimpleEmailMessage {\r\n  to: string;\r\n  from: string;\r\n  subject: string;\r\n  message: string;\r\n  customer_name?: string;\r\n  inquiry_type?: string;\r\n  company?: string;\r\n  phone?: string;\r\n  website?: string;\r\n  urgency?: string;\r\n  budget?: string;\r\n  timeline?: string;\r\n}\r\n\r\ninterface SimpleEmailResponse {\r\n  success: boolean;\r\n  message: string;\r\n  messageId?: string;\r\n}\r\n\r\nclass SimpleEmailService {\r\n  // üìß Send contact form notification\r\n  async sendContactFormNotification(formData: any): Promise<SimpleEmailResponse> {\r\n    try {\r\n      console.log('üìß SIMPLE EMAIL SERVICE - Contact form notification:', {\r\n        to: 'seza.studio.website@gmail.com',\r\n        from: formData.email,\r\n        subject: `üåü New Contact Form: ${formData.subject}`,\r\n        customer: `${formData.firstName} ${formData.lastName}`,\r\n        inquiryType: formData.inquiryType,\r\n        urgency: formData.urgency\r\n      });\r\n\r\n      // Simulate processing delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Contact form notification logged successfully! (EmailJS setup required for actual sending)',\r\n        messageId: `simple_${Date.now()}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Simple email service error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to process contact form notification.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // üìß Send professional reply\r\n  async sendProfessionalReply(formData: any, template: string): Promise<SimpleEmailResponse> {\r\n    try {\r\n      console.log('üìß SIMPLE EMAIL SERVICE - Professional reply:', {\r\n        to: formData.email,\r\n        from: 'seza.studio.website@gmail.com',\r\n        subject: `Re: ${formData.subject} - Thank You for Contacting SEZA Team`,\r\n        template: template,\r\n        customer: `${formData.firstName} ${formData.lastName}`,\r\n        inquiryType: formData.inquiryType\r\n      });\r\n\r\n      // Simulate processing delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Professional reply logged successfully! (EmailJS setup required for actual sending)',\r\n        messageId: `simple_${Date.now()}`\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('‚ùå Simple email service error:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to process professional reply.'\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport const simpleEmailService = new SimpleEmailService();\r\n"],"names":["SimpleEmailService","formData","resolve","error","template","simpleEmailService"],"mappings":"AAwBA,MAAMA,CAAmB,CAEvB,MAAM,4BAA4BC,EAA6C,CACzE,GAAA,CACF,eAAQ,IAAI,uDAAwD,CAClE,GAAI,gCACJ,KAAMA,EAAS,MACf,QAAS,wBAAwBA,EAAS,OAAO,GACjD,SAAU,GAAGA,EAAS,SAAS,IAAIA,EAAS,QAAQ,GACpD,YAAaA,EAAS,YACtB,QAASA,EAAS,OAAA,CACnB,EAGD,MAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,GAAI,CAAC,EAE/C,CACL,QAAS,GACT,QAAS,6FACT,UAAW,UAAU,KAAK,IAAK,CAAA,EAAA,QAG1BC,EAAO,CACN,eAAA,MAAM,gCAAiCA,CAAK,EAC7C,CACL,QAAS,GACT,QAAS,8CAAA,CAEb,CACF,CAGA,MAAM,sBAAsBF,EAAeG,EAAgD,CACrF,GAAA,CACF,eAAQ,IAAI,gDAAiD,CAC3D,GAAIH,EAAS,MACb,KAAM,gCACN,QAAS,OAAOA,EAAS,OAAO,wCAChC,SAAAG,EACA,SAAU,GAAGH,EAAS,SAAS,IAAIA,EAAS,QAAQ,GACpD,YAAaA,EAAS,WAAA,CACvB,EAGD,MAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,GAAI,CAAC,EAE/C,CACL,QAAS,GACT,QAAS,sFACT,UAAW,UAAU,KAAK,IAAK,CAAA,EAAA,QAG1BC,EAAO,CACN,eAAA,MAAM,gCAAiCA,CAAK,EAC7C,CACL,QAAS,GACT,QAAS,uCAAA,CAEb,CACF,CACF,CAEa,MAAAE,EAAqB,IAAIL"}