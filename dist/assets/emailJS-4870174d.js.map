{"version":3,"mappings":"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","names":["EmailJSResponseStatus","_status","_text","createWebStorage","key","value","store","buildOptions","options","init","origin","opts","sendPost","url","data","headers","response","message","responseStatus","validateParams","publicKey","serviceID","templateID","validateTemplateParams","templateParams","isHeadless","navigator","headlessError","validateBlockListParams","list","watchVariable","isBlockListDisabled","_a","getValue","name","isBlockedValueInParams","params","blockedEmailError","validateLimitRateParams","throttle","id","getLeftTime","storage","lastTime","isLimitRateHit","defaultID","limitRateError","send","blockHeadless","storageProvider","blockList","limitRate","validateForm","form","findHTMLForm","sendForm","currentForm","formData","emailjs","EmailJSService","__publicField","error","simpleEmailService","__vitePreload","result","template","inquiryType","customerName","messages","emailJSService"],"sources":["../../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../../node_modules/@emailjs/browser/es/store/store.js","../../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../../node_modules/@emailjs/browser/es/methods/init/init.js","../../node_modules/@emailjs/browser/es/api/sendPost.js","../../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../../node_modules/@emailjs/browser/es/methods/send/send.js","../../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","../../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../../node_modules/@emailjs/browser/es/index.js","../../src/services/emailJS.ts"],"sourcesContent":["export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","// 📧 EmailJS Service - Real Email Sending Integration\r\nimport emailjs from '@emailjs/browser';\r\n\r\ninterface EmailJSMessage extends Record<string, unknown> {\r\n  to_email: string;\r\n  from_email: string;\r\n  subject: string;\r\n  message: string;\r\n  customer_name?: string;\r\n  inquiry_type?: string;\r\n  company?: string;\r\n  phone?: string;\r\n  website?: string;\r\n  urgency?: string;\r\n  budget?: string;\r\n  timeline?: string;\r\n}\r\n\r\ninterface EmailJSResponse {\r\n  success: boolean;\r\n  message: string;\r\n  messageId?: string;\r\n}\r\n\r\nclass EmailJSService {\r\n  private serviceId: string;\r\n  private templateId: string;\r\n  private publicKey: string;\r\n  private isInitialized: boolean = false;\r\n\r\n  constructor() {\r\n    // EmailJS Configuration\r\n    this.serviceId = 'service_seza_automation'; // You'll need to create this in EmailJS\r\n    this.templateId = 'template_seza_contact'; // You'll need to create this in EmailJS\r\n    this.publicKey = (import.meta as any).env?.VITE_EMAILJS_PUBLIC_KEY || 'YOUR_EMAILJS_PUBLIC_KEY';\r\n    \r\n    this.initializeEmailJS();\r\n  }\r\n\r\n  private initializeEmailJS(): void {\r\n    try {\r\n      emailjs.init(this.publicKey);\r\n      this.isInitialized = true;\r\n      console.log('✅ EmailJS initialized successfully');\r\n    } catch (error) {\r\n      console.error('❌ EmailJS initialization failed:', error);\r\n      this.isInitialized = false;\r\n    }\r\n  }\r\n\r\n  // 📧 Send contact form notification (TO seza.studio.website@gmail.com)\r\n  async sendContactFormNotification(formData: any): Promise<EmailJSResponse> {\r\n    try {\r\n      if (!this.isInitialized || this.publicKey === 'YOUR_EMAILJS_PUBLIC_KEY') {\r\n        console.log('⚠️ EmailJS not configured - using fallback service');\r\n        // Import and use simple email service as fallback\r\n        const { simpleEmailService } = await import('./simpleEmailService');\r\n        return await simpleEmailService.sendContactFormNotification(formData);\r\n      }\r\n\r\n      const templateParams: EmailJSMessage = {\r\n        to_email: 'seza.studio.website@gmail.com', // TO your email\r\n        from_email: formData.email, // FROM customer's email\r\n        subject: `🌟 New Contact Form: ${formData.subject}`,\r\n        message: this.generateContactFormMessage(formData),\r\n        customer_name: `${formData.firstName} ${formData.lastName}`,\r\n        inquiry_type: formData.inquiryType,\r\n        company: formData.company || 'Not specified',\r\n        phone: formData.phone || 'Not provided',\r\n        website: formData.website || 'Not provided',\r\n        urgency: formData.urgency,\r\n        budget: formData.budget || 'Not specified',\r\n        timeline: formData.timeline || 'Not specified'\r\n      };\r\n\r\n      console.log('📧 Sending contact form notification via EmailJS:', {\r\n        to: templateParams.to_email,\r\n        from: templateParams.from_email,\r\n        subject: templateParams.subject\r\n      });\r\n\r\n      const result = await emailjs.send(\r\n        this.serviceId,\r\n        this.templateId,\r\n        templateParams\r\n      );\r\n\r\n      console.log('✅ Contact form notification sent successfully:', result);\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Contact form notification sent successfully!',\r\n        messageId: result.text\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error sending contact form notification:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to send contact form notification. Please try again.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 📧 Send professional reply (FROM seza.studio.website@gmail.com TO customer)\r\n  async sendProfessionalReply(formData: any, template: string): Promise<EmailJSResponse> {\r\n    try {\r\n      if (!this.isInitialized || this.publicKey === 'YOUR_EMAILJS_PUBLIC_KEY') {\r\n        console.log('⚠️ EmailJS not configured - using fallback service');\r\n        // Import and use simple email service as fallback\r\n        const { simpleEmailService } = await import('./simpleEmailService');\r\n        return await simpleEmailService.sendProfessionalReply(formData, template);\r\n      }\r\n\r\n      const templateParams: EmailJSMessage = {\r\n        to_email: formData.email, // TO customer's email\r\n        from_email: 'seza.studio.website@gmail.com', // FROM your email\r\n        subject: `Re: ${formData.subject} - Thank You for Contacting SEZA Team`,\r\n        message: this.generateProfessionalReplyMessage(formData, template),\r\n        customer_name: `${formData.firstName} ${formData.lastName}`,\r\n        inquiry_type: formData.inquiryType,\r\n        company: formData.company || 'Not specified',\r\n        phone: formData.phone || 'Not provided',\r\n        website: formData.website || 'Not provided',\r\n        urgency: formData.urgency,\r\n        budget: formData.budget || 'Not specified',\r\n        timeline: formData.timeline || 'Not specified'\r\n      };\r\n\r\n      console.log('📧 Sending professional reply via EmailJS:', {\r\n        to: templateParams.to_email,\r\n        from: templateParams.from_email,\r\n        subject: templateParams.subject,\r\n        template: template\r\n      });\r\n\r\n      const result = await emailjs.send(\r\n        this.serviceId,\r\n        'template_seza_reply', // Different template for replies\r\n        templateParams\r\n      );\r\n\r\n      console.log('✅ Professional reply sent successfully:', result);\r\n      \r\n      return {\r\n        success: true,\r\n        message: 'Professional reply sent successfully!',\r\n        messageId: result.text\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('❌ Error sending professional reply:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to send professional reply. Please try again.'\r\n      };\r\n    }\r\n  }\r\n\r\n  // 📝 Generate contact form message for internal notification\r\n  private generateContactFormMessage(formData: any): string {\r\n    return `\r\n🌟 NEW CONTACT FORM SUBMISSION\r\n\r\n👤 CUSTOMER DETAILS:\r\nName: ${formData.firstName} ${formData.lastName}\r\nEmail: ${formData.email}\r\nPhone: ${formData.phone || 'Not provided'}\r\nCompany: ${formData.company || 'Not specified'}\r\nWebsite: ${formData.website || 'Not provided'}\r\n\r\n📋 INQUIRY DETAILS:\r\nType: ${formData.inquiryType}\r\nSubject: ${formData.subject}\r\nUrgency: ${formData.urgency}\r\nPreferred Contact: ${formData.preferredContact}\r\nBudget: ${formData.budget || 'Not specified'}\r\nTimeline: ${formData.timeline || 'Not specified'}\r\n\r\n💬 MESSAGE:\r\n${formData.message}\r\n\r\n📊 AUTOMATION STATUS:\r\n✅ Gmail API Active\r\n✅ Email Response Automation\r\n✅ AI Phone System\r\n✅ Instagram Automation\r\n✅ Booking Follow-up\r\n✅ Real Miami Outreach\r\n\r\n🔧 TECHNICAL DETAILS:\r\nService Account: seza.studio.website@gmail.com\r\nProject ID: zesaautomation\r\nClient ID: 665326919261-oje50obh9onl1bbc8o58tsod1lj2btn0.apps.googleusercontent.com\r\nConsent to contact: ${formData.consent ? 'Yes' : 'No'}\r\nNewsletter subscription: ${formData.newsletter ? 'Yes' : 'No'}\r\n\r\n---\r\nThis email was sent via the SEZA AI Assistant automation system.\r\n    `.trim();\r\n  }\r\n\r\n  // 📝 Generate professional reply message for customer\r\n  private generateProfessionalReplyMessage(formData: any, template: string): string {\r\n    const inquiryType = formData.inquiryType;\r\n    const customerName = formData.firstName;\r\n    \r\n    // Generate different messages based on inquiry type\r\n    const messages = {\r\n      'photography': `\r\nDear ${customerName},\r\n\r\nThank you for your interest in SEZA Team's photography services! We're excited to help bring your vision to life.\r\n\r\n🎯 WHAT HAPPENS NEXT?\r\n• Within 24 hours: Our photography team will review your inquiry\r\n• Portfolio Review: We'll send you our latest portfolio showcasing similar projects\r\n• Consultation Call: Schedule a free 30-minute consultation to discuss your needs\r\n\r\n🌟 WHY CHOOSE SEZA TEAM PHOTOGRAPHY?\r\n• Professional Quality: Award-winning photographers with 10+ years experience\r\n• Creative Vision: Unique artistic approach tailored to your brand\r\n• Fast Turnaround: Quick delivery without compromising quality\r\n• Modern Technology: Latest equipment and editing software\r\n• Personal Service: Dedicated project manager for each client\r\n\r\nWe're committed to exceeding your expectations and creating stunning visuals that tell your story.\r\n\r\nBest regards,\r\nSEZA Photography Team\r\n📧 photography@sezateamengineers.com\r\n📞 (305) 555-SEZA\r\n🌐 www.sezateamengineers.com\r\n      `,\r\n      'automation': `\r\nDear ${customerName},\r\n\r\nThank you for your interest in SEZA Team's business automation solutions! We're excited to help streamline your operations and boost your productivity.\r\n\r\n🚀 WHAT HAPPENS NEXT?\r\n• Within 12 hours: Our automation specialists will analyze your requirements\r\n• Case Studies: We'll send relevant case studies showing similar automation success stories\r\n• Demo Call: Schedule a personalized demo of our automation platform\r\n\r\n⚡ OUR AUTOMATION CAPABILITIES:\r\n• Workflow Automation: Streamline repetitive tasks and processes\r\n• Email Automation: Smart email campaigns and responses\r\n• Social Media Automation: Automated posting and engagement\r\n• Data Processing: Automated data collection and analysis\r\n• AI Integration: Intelligent decision-making systems\r\n• Analytics & Reporting: Real-time performance monitoring\r\n\r\nWe're committed to delivering automation solutions that save you time, reduce costs, and improve efficiency.\r\n\r\nBest regards,\r\nSEZA Automation Team\r\n📧 automation@sezateamengineers.com\r\n📞 (305) 555-SEZA\r\n🌐 www.sezateamengineers.com\r\n      `,\r\n      'ai-system': `\r\nDear ${customerName},\r\n\r\nThank you for your interest in SEZA Team's AI system development services! We're excited to explore how artificial intelligence can transform your business.\r\n\r\n⚡ URGENT PRIORITY - WHAT HAPPENS NEXT?\r\n• Within 6 hours: Our AI specialists will review your requirements\r\n• Capabilities Overview: Detailed breakdown of our AI capabilities\r\n• Consultation Call: Priority scheduling for AI strategy consultation\r\n\r\n🚀 OUR AI DEVELOPMENT EXPERTISE:\r\n• Machine Learning: Custom ML models and algorithms\r\n• Natural Language Processing: Chatbots and language understanding\r\n• Computer Vision: Image and video analysis systems\r\n• Predictive Analytics: Data-driven forecasting and insights\r\n• Process Automation: Intelligent workflow optimization\r\n• Custom AI Solutions: Tailored AI systems for your industry\r\n\r\nWe're committed to delivering cutting-edge AI solutions that give you a competitive advantage.\r\n\r\nBest regards,\r\nSEZA AI Development Team\r\n📧 ai@sezateamengineers.com\r\n📞 (305) 555-SEZA\r\n🌐 www.sezateamengineers.com\r\n      `,\r\n      'consulting': `\r\nDear ${customerName},\r\n\r\nThank you for considering SEZA Team for your consulting needs! We're excited to help you achieve your business goals through strategic guidance and expert insights.\r\n\r\n📈 WHAT HAPPENS NEXT?\r\n• Within 48 hours: Our consulting team will review your requirements\r\n• Expertise Overview: Detailed breakdown of our consulting capabilities\r\n• Strategy Session: Free initial consultation to discuss your challenges\r\n\r\n🎯 OUR CONSULTING EXPERTISE:\r\n• Business Strategy: Strategic planning and market analysis\r\n• Digital Transformation: Technology adoption and optimization\r\n• Growth Planning: Scaling strategies and market expansion\r\n• Process Optimization: Efficiency improvements and cost reduction\r\n• Change Management: Organizational transformation support\r\n• Technology Consulting: IT strategy and implementation\r\n\r\nWe're committed to providing actionable insights that drive real business results.\r\n\r\nBest regards,\r\nSEZA Consulting Team\r\n📧 consulting@sezateamengineers.com\r\n📞 (305) 555-SEZA\r\n🌐 www.sezateamengineers.com\r\n      `,\r\n      'partnership': `\r\nDear ${customerName},\r\n\r\nThank you for your interest in partnering with SEZA Team! We're excited to explore how we can create mutual value through strategic collaboration.\r\n\r\n🚀 WHAT HAPPENS NEXT?\r\n• Within 24 hours: Our business development team will review your proposal\r\n• Partnership Opportunities: Detailed overview of potential collaboration areas\r\n• Strategy Meeting: Schedule a partnership strategy discussion\r\n\r\n🌟 PARTNERSHIP OPPORTUNITIES:\r\n• Strategic Alliances: Long-term business partnerships\r\n• Joint Ventures: Collaborative project development\r\n• Technology Integration: API partnerships and integrations\r\n• Channel Partnerships: Reseller and referral programs\r\n• Co-Marketing: Joint marketing initiatives\r\n• Service Partnerships: Complementary service offerings\r\n\r\nWe're committed to building lasting partnerships that create value for both organizations.\r\n\r\nBest regards,\r\nSEZA Business Development Team\r\n📧 partnerships@sezateamengineers.com\r\n📞 (305) 555-SEZA\r\n🌐 www.sezateamengineers.com\r\n      `,\r\n      'event': `\r\nDear ${customerName},\r\n\r\nThank you for your interest in collaborating with SEZA Team for your event! We're excited to help make your event a memorable success.\r\n\r\n📅 WHAT HAPPENS NEXT?\r\n• Within 48 hours: Our event coordination team will review your requirements\r\n• Event Portfolio: Showcase of our previous successful events\r\n• Planning Session: Schedule an event planning consultation\r\n\r\n🎯 OUR EVENT SERVICES:\r\n• Event Photography: Professional event coverage and documentation\r\n• Video Production: Event highlights and promotional videos\r\n• Creative Design: Event branding and promotional materials\r\n• Social Media: Live event coverage and promotion\r\n• Automation: Event registration and follow-up systems\r\n• Analytics: Event performance tracking and reporting\r\n\r\nWe're committed to delivering exceptional event experiences that exceed your expectations.\r\n\r\nBest regards,\r\nSEZA Event Coordination Team\r\n📧 events@sezateamengineers.com\r\n📞 (305) 555-SEZA\r\n🌐 www.sezateamengineers.com\r\n      `,\r\n      'other': `\r\nDear ${customerName},\r\n\r\nThank you for reaching out to SEZA Team! We've received your inquiry and our team is reviewing it to provide you with the best possible response.\r\n\r\n📋 WHAT HAPPENS NEXT?\r\n• Within 72 hours: Our team will review your inquiry\r\n• Personalized Response: Tailored response based on your specific needs\r\n• Next Steps: Clear guidance on how we can help you\r\n\r\n🚀 SEZA TEAM SERVICES:\r\n• Photography: Professional photography services\r\n• Automation: Business process automation\r\n• AI Systems: Custom AI development\r\n• Consulting: Strategic business consulting\r\n• Partnerships: Strategic business partnerships\r\n• Events: Event management and coordination\r\n\r\nWe're committed to providing exceptional service and finding the best solution for your needs.\r\n\r\nBest regards,\r\nSEZA Team\r\n📧 info@sezateamengineers.com\r\n📞 (305) 555-SEZA\r\n🌐 www.sezateamengineers.com\r\n      `\r\n    };\r\n\r\n    return messages[inquiryType as keyof typeof messages] || messages['other'];\r\n  }\r\n}\r\n\r\nexport const emailJSService = new EmailJSService();\r\n"],"file":"assets/emailJS-4870174d.js"}